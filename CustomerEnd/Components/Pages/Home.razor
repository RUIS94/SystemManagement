@page "/"
@rendermode InteractiveServer
<PageTitle>Support</PageTitle>

<div class="container">
    <!-- Contact List -->
    <div class="card mb-3">
        <div class="d-flex justify-content-between align-items-center p-2">
            <h3>Support</h3>
        </div>
    </div>

    <!-- Message List -->
    <div class="message-container">
        @foreach (var message in messages)
        {
            <div class="message" style="background-color:@(message.IsMe ? "lightblue" : "lightgray");">
                @message.Text
            </div> 
        }
    </div>

    <!-- Input Section -->
    <div class="input-group mt-3">
        <input type="text" @bind="MessageText" placeholder="Enter message..."></input>
        <button @onclick="SendMessage" class="Send_btn">Send</button>
    </div>
</div>

@code {
    private string? MessageText;
    private List<Message> messages = new List<Message>();
    private HubConnection hubConnection;
    // private const string ApiKey = "MyKeyWillBeAddHere";
    // private HttpClient _httpClient;
    protected override async Task OnInitializedAsync()
    {
        // _httpClient = new HttpClient();
        // _httpClient.DefaultRequestHeaders.Add("API-KEY", ApiKey);
        //messages.Add(new Message { Text = "Hello! How can I assist you today?", IsMe = false });
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7207/chatHub")
            .WithAutomaticReconnect()
            .Build();
        hubConnection.On<string, string>("ReceiveMessage", async (user, message) =>
        {
            await InvokeAsync(() =>
            {
                messages.Add(new Message { Text = $"{user}: {message}", IsMe = false });
                StateHasChanged();
            });
        });
        await hubConnection.StartAsync();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(MessageText))
        {
            // string user = "Support";
            // string userInput = MessageText;
            await hubConnection.SendAsync("SendMessage", "Customer", MessageText);            
            messages.Add(new Message { Text = MessageText, IsMe = true });
            MessageText = string.Empty;
            StateHasChanged();
        }
    }
    public class Message
    {
        public string? Text { get; set; }
        public bool IsMe { get; set; }
    }
}